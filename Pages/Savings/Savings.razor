@page "/savings"
<Page PageTitle="Savings">
    <Actions>
        <Button @onclick="() => IsCreateModalVisible = true">+ Add New Pot</Button>
    </Actions>
    <ChildContent>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
            @foreach (var pot in Pots)
            {
                <div>
                    <SavingPotCard @key="pot.Id" Pot="@pot" OnEdit="InitEditModal" OnDelete="InitDeleteModal" OnWithdrawClicked="HandleWithdrawFundsClick" OnAddFunds="HandleAddFundsClick"></SavingPotCard>
                </div>
            }
        </div>
        <CreatePotModal @bind-IsVisible="@IsCreateModalVisible" OnSubmit="CreatePot"></CreatePotModal>
        <EditPotModal @bind-IsVisible="@IsEditModalVisible" OnSubmit="UpdatePot" Pot="@selectedPot"></EditPotModal>
        <AddOrWithdrawModal @bind-IsVisible="@IsAddOrWithdrawVisible" CurrentAmount="selectedPot.Total" TargetAmount="selectedPot.Target" Type="transactionType" OnConfirm="HandleTransactionConfirmed"></AddOrWithdrawModal>

    </ChildContent>
</Page>

@code {

    public List<Pot> Pots { get; set; } = new List<Pot>();

    public bool IsCreateModalVisible { get; set; }
    public bool IsEditModalVisible { get; set; }
    public Pot? selectedPot { get; set; } = new Pot();
    private TransactionType transactionType = TransactionType.Add;
    private bool IsAddOrWithdrawVisible = false;
    private void ToggleAddOrWithdraw() => IsAddOrWithdrawVisible = !IsAddOrWithdrawVisible;


    [Inject] IPotsService? potService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Pots = (await potService.GetAsync()).ToList();
    }

    private async Task CreatePot(Pot pot)
    {
        var result = await potService.PostAsync(pot);
        Pots.Add(result);
    }

    private async Task UpdatePot(Pot pot)
    {
        var result = await potService.PutAsync(pot, pot.Id);
        Pots[Pots.FindIndex(p => p.Id == pot.Id)] = result;
    }

    private async Task InitEditModal(Pot pot)
    {
        selectedPot = pot;
        IsEditModalVisible = true;
    }

    private async Task InitDeleteModal(string pot)
    {
    }

    private async Task HandleAddFundsClick(string id)
    {
        selectedPot =  Pots.Find(p => p.Id == id);
        transactionType = TransactionType.Add;
        ToggleAddOrWithdraw();
    }

    private async Task HandleWithdrawFundsClick(string id)
    {
        selectedPot = Pots.Find(p => p.Id == id);
        transactionType = TransactionType.Withdraw;
        ToggleAddOrWithdraw();
    }


    private async Task HandleTransactionConfirmed((TransactionType, decimal) transaction)
    {
        if (transaction.Item1 == TransactionType.Add)
        {
            selectedPot.Total += (int)transaction.Item2;
        }
        else
        {
            selectedPot.Total -= (int)transaction.Item2;
        }

        IsAddOrWithdrawVisible = false;
        await UpdatePot(selectedPot);
    }

}