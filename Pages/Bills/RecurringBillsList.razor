@using PersonalFinanceApp.Components.Dropdown
@using PersonalFinanceApp.Components.InputField
<div class="container  md:mx-auto transition-all duration-500 bg-white px-5 py-10">
    <div class="flex justify-between items-center mb-3 gap-4">
        <InputField TValue="string" Placeholder="Search" Icon="Icons.Gliph" ValueChanged="HandleSearch"></InputField>
        <p>@sortBy</p>
        <div class="flex gap-2 md:gap-4 items-center ">
            <Dropdown TKey="string" Label="Sort By:" Options="sortOptions" @bind-SelectedValue="sortBy" Icon="Icons.UpAndDownArrow"></Dropdown>
        </div>
    </div>

    <table class="w-full text-gray-500 btable text-preset-5 transition-transform duration-500 overflow-x-auto">
        <thead class="hidden sm:table-header-group">
            <tr class="border-b ">
                <th>Bill Title</th>
                <th>Due Date</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bill in filteredTransactions())
            {
                <tr class="hidden sm:table-row border-b hover:bg-gray-50 hover:cursor-pointer">
                    <td class="flex items-center text-preset-4-bold text-gray-900">
                        <img src="@bill.Avatar" alt="@bill.Name" class="w-10 h-10 rounded-full mr-3" />
                        <span>@bill.Name</span>
                    </td>
                    <td>
                        <div class="flex items-center gap-1 font-bold @(bill.IsPaid ? "text-green" : "text-red")">
                            @bill.DueDate.ToString("dd MMM yyyy")
                            <IconComponent Class="inline ml-1" Icon="@(bill.IsPaid ? Icons.CircleCheck : Icons.CircleAlert)" Width="14" Heigth="14"></IconComponent>
                        </div>
                    </td>
                    <td class="text-right font-bold @(bill.IsPaid ? "text-gray-900" : "text-red")">
                        $@Math.Abs(bill.Amount).ToString("F2")
                    </td>
                </tr>
                <tr class=" sm:hidden border-b hover:bg-gray-50 hover:cursor-pointer">
                    <td class="flex justify-between">
                        <div class="flex items-center">
                            <img src="@bill.Avatar" alt="@bill.Name" class="w-10 h-10 rounded-full mr-3" />
                            <div class="flex flex-col gap-1">
                                <span class="text-preset-4-bold text-gray-900">@bill.Name</span>
                                <div class="flex items-center gap-1 font-bold @(bill.IsPaid ? "text-green" : "text-red")">
                                    @bill.DueDate.ToString("dd MMM yyyy")
                                    <IconComponent Class="inline ml-1" Icon="@(bill.IsPaid ? Icons.CircleCheck : Icons.CircleAlert)" Width="14" Heigth="14"></IconComponent>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col gap-1">
                            <span class="text-preset-4-bold @(bill.IsPaid ? "text-green" : "text-red")">$@Math.Abs(bill.Amount).ToString("F2")</span>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-4 ">
        <Pagger CurrentPage="@currentPage" TotalItems="@Bills.Count()" ItemsPerPage="@pageSize" OnPageChanged="@ChangePage" PaginationRange="4"></Pagger>
    </div>
</div>

@code {
    [Parameter] public IEnumerable<Bill> Bills { get; set; } = new List<Bill>();
    [CascadingParameter]
    public IEnumerable<Category> Categories { get; set; }
    private string searchTerm = "";
    private string sortBy = "latest";
    private int currentPage = 1;
    private int pageSize = 8;
    private int totalPages => (int)Math.Ceiling((double)Bills.Count() / pageSize);
    private List<DropdownOption<string>> sortOptions = new List<DropdownOption<string>>
{
new DropdownOption<string>("latest", "Latest"),
new DropdownOption<string>("oldest", "Oldest"),
new DropdownOption<string>("a-to-z", "A to Z"),
new DropdownOption<string>("z-to-a", "Z to A"),
new DropdownOption<string>("highest", "Highest"),
new DropdownOption<string>("lowest", "Lowest")
};
    private List<DropdownOption<string>> categoryOptions => Categories.Select(c => new DropdownOption<string>(c.Name, c.Name)).Distinct().ToList();
    protected override async Task OnInitializedAsync()
    {

    }



    private List<Bill> filteredTransactions()
    {
        return Bills.OrderBy(t => t.Category).ToList();
    }

    private void HandleSearch(string searchTerm)
    {
        this.searchTerm = searchTerm;
        ChangePage(1);
    }
    private void ChangePage(int pageNumber)
    {
        currentPage = pageNumber;
    }

}