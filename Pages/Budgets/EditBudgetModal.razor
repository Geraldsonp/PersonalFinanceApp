<Modal Title="Edit Budget" TitleCss="text-3xl font-bold" IsVisible="@IsVisible" IsVisibleChanged="@IsVisibleChanged" Size="Modal.ModalSize.Large">
    <p class="text-gray-500 text-12 mb-4">As your budgets change, feel free to update your spending limits.</p>
    <form    @onsubmit="HandleSubmit">
        <input type="number" hidden @bind="Model.Id">
        <div class="mb-4">
            <label class="block text-gray-500 text-12 font-bold mb-2" for="category">
                Budget Category
            </label>
            <select @bind="Model.Category" id="category" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                <option value="">Select a category</option>
                @foreach (var category in Categories)
                {
                    <option value="@category.Name">@category.Name</option>
                }
            </select>
        </div>
        <div class="mb-4">
            <label class="block text-gray-500 text-12 font-bold mb-2" for="maxSpend">
                Maximum Spend
            </label>
            <InputField Prefix="$" required TValue="decimal" @bind-Value="Model.Maximum" Type="number" id="maxSpend" Placeholder="$ e.g. 2000" />
        </div>
        <div class="mb-4">
            <BasicDropDown  Label="Theme" Options="@themesOptions" SelectedColor="@Model.Theme"  SelectedValue="@(Colors.FirstOrDefault(c => c.ColorCode == Model.Theme)?.Id ?? 0)"  Variant="DropdownVariant.ColorSelection">

            </BasicDropDown>
        </div>
        <div class="flex items-center justify-between">
            <Button Type="submit">Submit </Button>
        </div>
    </form>
</Modal>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<Budget> OnSubmit { get; set; }
    
    [Parameter] public Budget Model { get; set; } = new Budget();
    
    [CascadingParameter]
    private IEnumerable<Category> Categories { get; set; } = new List<Category>();
    [CascadingParameter]
    public IEnumerable<Color> Colors { get; set; } = new List<Color>();
    private List<DropdownOption<int>> themesOptions => Colors.Select(c => new DropdownOption<int>(c.Id, c.Name, $"{c.ColorCode}")).ToList();


    private void HandleSubmit()
    {
        // Handle form submission
        OnSubmit.InvokeAsync(Model);
        IsVisibleChanged.InvokeAsync(false);
    }
}