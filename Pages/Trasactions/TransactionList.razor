@using PersonalFinanceApp.Components.Dropdown
@using PersonalFinanceApp.Components.InputField
<div class="container md:mx-auto transition-all duration-500">
    <div class="flex justify-between items-center mb-3 gap-4">
        <InputField TValue="string" Placeholder="Search" Icon="Icons.Gliph" ValueChanged="HandleSearch"></InputField>
        <p>@sortBy</p>
        <div class="flex gap-2 md:gap-4 items-center ">
            <Dropdown TKey="string" Label="Sort By:" Options="sortOptions" @bind-SelectedValue="sortBy" Icon="Icons.UpAndDownArrow"></Dropdown>
            <Dropdown TKey="int" Label="Category:" Options="categoryOptions" @bind-SelectedValue="categoryFilter" Icon="Icons.Filter"></Dropdown>
        </div>
    </div>

    <table class="w-full text-gray-500 btable text-preset-5 transition-transform duration-500 overflow-x-auto">
        <thead class="hidden sm:table-header-group">
            <tr class="border-b ">
                <th>Recipient / Sender</th>
                <th>Category</th>
                <th>Transaction Date</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in filteredTransactions)
            {
                <tr class="hidden sm:table-row border-b hover:bg-gray-50 hover:cursor-pointer">
                    <td class="flex items-center text-preset-4-bold text-gray-900">
                        <img src="@transaction.Avatar" alt="@transaction.RecipientOrSender" class="w-10 h-10 rounded-full mr-3" />
                        <span>@transaction.RecipientOrSender</span>
                    </td>
                    <td>@transaction.Category</td>
                    <td>@transaction.Date.ToString("dd MMM yyyy")</td>
                    <td class="text-right font-bold @(transaction.Amount > 0 ? "text-green" : "text-gray-900")">
                        @(transaction.Amount > 0 ? "+" : "-")$@Math.Abs(transaction.Amount).ToString("F2")
                    </td>
                </tr>
                <tr class=" sm:hidden border-b hover:bg-gray-50 hover:cursor-pointer">
                    <td class="flex justify-between">
                        <div class="flex items-center">
                            <img src="@transaction.Avatar" alt="@transaction.RecipientOrSender" class="w-10 h-10 rounded-full mr-3" />
                            <div class="flex flex-col gap-1">
                                <span class="text-preset-4-bold text-gray-900">@transaction.RecipientOrSender</span>
                                <span>@transaction.Category</span>
                            </div>
                        </div>
                        <div class="flex flex-col gap-1">
                            <span class="text-preset-4-bold @(transaction.Amount > 0 ? "text-green" : "text-gray-900")">@(transaction.Amount > 0 ? "+" : "-")$@Math.Abs(transaction.Amount).ToString("F2")</span>
                            <span>@transaction.Date.ToString("dd MMM yyyy")</span>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-4 ">
        <Pagger CurrentPage="@currentPage" TotalItems="@Transactions.Count" ItemsPerPage="@pageSize" OnPageChanged="@ChangePage" PaginationRange="4"></Pagger>
    </div>
</div>

@code {
    [Parameter] public IList<Transaction> Transactions { get; set; } = new List<Transaction>();
    [CascadingParameter]
    public IEnumerable<Category> Categories { get; set; }
    private string searchTerm = "";
    private string sortBy = "latest";
    private int categoryFilter = 0;
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages => (int)Math.Ceiling((double)Transactions.Count / pageSize);
    private List<DropdownOption<string>> sortOptions = new List<DropdownOption<string>>
        {
        new DropdownOption<string>("latest", "Latest"),
        new DropdownOption<string>("oldest", "Oldest"),
        new DropdownOption<string>("a-to-z", "A to Z"),
        new DropdownOption<string>("z-to-a", "Z to A"),
        new DropdownOption<string>("highest", "Highest"),
        new DropdownOption<string>("lowest", "Lowest")
        };
    private List<DropdownOption<int>> categoryOptions => Categories.Select(c => new DropdownOption<int>(c.Id, c.Name)).Distinct().ToList();
    protected override async Task OnInitializedAsync()
    {

    }



    private List<Transaction> filteredTransactions => new TransactionFilterAndSorting(Transactions, searchTerm, categoryFilter, sortBy, currentPage, pageSize).Filter().ToList();

    private void HandleSearch(string searchTerm)
    {
        this.searchTerm = searchTerm;
        ChangePage(1);
    }
    private void ChangePage(int pageNumber)
    {
        currentPage = pageNumber;
    }
}