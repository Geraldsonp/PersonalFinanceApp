@inject ITransactionService TransactionService

<div class="container mx-auto p-4">
    <div class="flex justify-between items-center mb-4">
        <div class="relative">
            <input type="text" placeholder="Search transaction" class="pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" @bind="searchTerm" @bind:event="oninput" />
            <svg class="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
        </div>
        <div class="flex space-x-4">
            <select class="border rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind="sortBy">
                <option value="Latest">Latest</option>
                <option value="Oldest">Oldest</option>
                <option value="Highest">Highest</option>
                <option value="Lowest">Lowest</option>
            </select>
            <select class="border rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind="categoryFilter">
                <option value="">All Transactions</option>
                @foreach (var category in categories)
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
    </div>

    <table class="w-full">
        <thead>
            <tr class="border-b">
                <th class="text-left py-4">Recipient / Sender</th>
                <th class="text-left py-4">Category</th>
                <th class="text-left py-4">Transaction Date</th>
                <th class="text-right py-4">Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in filteredTransactions)
            {
                <tr class="border-b hover:bg-gray-50">
                    <td class="py-4 flex items-center">
                        <img src="https://i.pravatar.cc/300" alt="@transaction.RecipientOrSender" class="w-10 h-10 rounded-full mr-3" />
                        <span>@transaction.RecipientOrSender</span>
                    </td>
                    <td class="py-4">@transaction.Category</td>
                    <td class="py-4">@transaction.Date.ToString("dd MMM yyyy")</td>
                    <td class="py-4 text-right @(transaction.Amount > 0 ? "text-green-600" : "text-red-600")">
                        @(transaction.Amount > 0 ? "+" : "-")$@Math.Abs(transaction.Amount).ToString("F2")
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-4 flex justify-center">
        <nav>
            <ul class="flex space-x-2">
                @for (int i = 1; i <= totalPages; i++)
                {
                    int pageNumber = i;
                    <li>
                        <button class="px-3 py-1 rounded @(currentPage == pageNumber ? "bg-blue-500 text-white" : "bg-gray-200")"
                                @onclick="() => ChangePage(pageNumber)">
                            @pageNumber
                        </button>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

@code {
    private IEnumerable<Transaction> transactions = new List<Transaction>();
    private List<string> categories = new List<string>();
    private string searchTerm = "";
    private string sortBy = "Latest";
    private string categoryFilter = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)filteredTransactions.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetAsync();
        categories = transactions.Select(t => t.Category).Distinct().ToList();
    }

    private List<Transaction> filteredTransactions =>
        transactions
            .Where(t => string.IsNullOrEmpty(searchTerm) || t.RecipientOrSender.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Where(t => string.IsNullOrEmpty(categoryFilter) || t.Category == categoryFilter)
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

    private void ChangePage(int pageNumber)
    {
        currentPage = pageNumber;
    }
}