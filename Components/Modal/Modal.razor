@using System.Linq.Expressions

<div class="@GetModalClass()">
    <div class="@GetModalContentClass()" @onclick:stopPropagation>
        <div class="flex justify-between items-center mb-4">
            <h3 class="@TitleCss">@Title</h3>
            <button @onclick="CloseModal" class="text-gray-400 hover:text-gray-600 transition-colors duration-200">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>
        <div>
            @ChildContent
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public string TitleCss { get; set; } = "text-lg font-medium text-gray-900 ";
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public ModalSize Size { get; set; } = ModalSize.Medium;

    private string GetModalClass() => 
        $"fixed px-14 md:px-0 inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 transition-opacity duration-300 ease-in-out {(IsVisible ? "visible opacity-100" : "invisible opacity-0")}";

    private string GetModalContentClass()
    {
        var sizeClass = Size switch
        {
            ModalSize.Small => "max-w-sm",
            ModalSize.Medium => "max-w-md",
            ModalSize.Large => "max-w-lg",
            ModalSize.ExtraLarge => "max-w-xl",
            ModalSize.TwoExtraLarge => "max-w-2xl",
            ModalSize.ThreeExtraLarge => "max-w-3xl",
            ModalSize.FourExtraLarge => "max-w-4xl",
            ModalSize.FiveExtraLarge => "max-w-5xl",
            ModalSize.SixExtraLarge => "max-w-6xl",
            ModalSize.SevenExtraLarge => "max-w-7xl",
            _ => "max-w-md"
        };

        return $"relative top-20 mx-auto p-6 border shadow-lg rounded-md bg-white transition-all duration-300 ease-in-out transform {sizeClass} w-full {(IsVisible ? "visible opacity-100 translate-y-0 scale-100" : "invisible opacity-0 -translate-y-4 scale-95")}";
    }


    private Task CloseModal()
    {
        return IsVisibleChanged.InvokeAsync(false);
    }

    public enum ModalSize
    {
        Small,
        Medium,
        Large,
        ExtraLarge,
        TwoExtraLarge,
        ThreeExtraLarge,
        FourExtraLarge,
        FiveExtraLarge,
        SixExtraLarge,
        SevenExtraLarge
    }
}