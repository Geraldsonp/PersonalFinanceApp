@using System.Linq

<div class="relative @Class" style="width: 100%; height: 100%;">
    <svg viewBox="0 0 100 100" class="w-full h-full" >
        @{
            const decimal circumference = 100;
            const decimal radius = circumference / (2 * (decimal)Math.PI);
            decimal total = Data.Sum(item => (decimal)item.Value);
            var currentLength = 0.0m;
            decimal offset = 25;

        }
        @foreach (var (item, index) in Data.Select((item, index) => (item, index)))
        {
            decimal percentage = (decimal)item.Value / total * 100;
            currentLength += percentage;
            <circle 
                cx="50" 
                cy="50" 
                r="@radius.ToString("F0")"
                fill="transparent"
                stroke="@item.Color"
                stroke-width="50"
                stroke-dasharray="@percentage.ToString("F0"), @((100 - percentage).ToString("F0") )"
                stroke-dashoffset="@(offset.ToString("F0"))"
                @onmouseover="() => OnSliceHover(item)"
                @onmouseout="OnSliceLeave">
                <title>@item.Label: @item.Value.ToString("N2")</title>
            </circle>
            offset = 100 - currentLength + 25;
        }
        <circle cx="50" cy="50" r="25" fill="white"/> @* Center circle for donut effect *@
    </svg>

    @if (ShowLegend)
    {
        <div class="absolute top-0 right-0 bg-white bg-opacity-80 p-2 rounded shadow-md">
            @foreach (var item in Data)
            {
                <div class="flex items-center mb-1">
                    <div class="w-4 h-4 mr-2" style="background-color: @item.Color"></div>
                    <span class="text-sm">@item.Label</span>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public List<PieChartItem> Data { get; set; } = new();
    [Parameter] public string Size { get; set; } = "300px";
    [Parameter] public bool ShowLegend { get; set; } = true;
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public EventCallback<PieChartItem> OnSliceHoverCallback { get; set; }

    private async Task OnSliceHover(PieChartItem item)
    {
        await OnSliceHoverCallback.InvokeAsync(item);
    }

    private async Task OnSliceLeave()
    {
        await OnSliceHoverCallback.InvokeAsync(null);
    }

    public class PieChartItem
    {
        public string Label { get; set; }
        public float Value { get; set; }
        public string Color { get; set; }
    }
}