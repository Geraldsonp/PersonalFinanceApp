@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Web
@using PersonalFinanceApp.Components

<div class="md:flex items-center gap-3 transition-all ">
    <label class=" text-gray-700 text-12 hidden md:block w-full" >@Label</label>
    <div class="relative inline-block w-full">
        <button @onclick="ToggleDropdown" class=" md:bg-white border md:border-gray-300 hover:border-gray-500 px-2 md:px-4 py-2 rounded md:shadow leading-tight focus:outline-none focus:shadow-outline text-sm md:min-w-36">
            <div class="hidden md:flex items-center justify-between">
                <span class="truncate  mr-2 hidden md:block">@(SelectedOption?.Label ?? "Select")</span>
                @if (SelectedOption == null)
                {
                    <svg class="flex-shrink-0 fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                        <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                    </svg>
                }
            </div>
            <div class="md:hidden ">
                @if (Icon != null)
                {
                    <IconComponent Icon="@Icon" Width="12" Heigth="12"></IconComponent>
                }
            </div>
        </button>
        @if (SelectedOption != null)
        {
            <button @onclick="() => ClearSelected()" class="absolute inset-y-0 right-2 flex items-center pr-2 hidden md:block">
                <IconComponent Icon="Icons.CrossX" Heigth="16" Width="16"></IconComponent>
            </button>
        }

        @if (IsOpen)
        {
            <div class="absolute z-10 right-0 w-full mt-1 bg-white border border-gray-100 rounded shadow-lg" style="min-width: 172px;">
                @foreach (var option in Options)
                {
                    <button @onclick="() => SelectOption(option)" class="block w-full border-b border-gray-100 text-left px-4 py-2 hover:bg-gray-100 text-sm @(option.Value == SelectedValue ? "bg-gray-100 font-bold" : "")" style="min-width: 172px;">
                        <span class="truncate block">@option.Label</span>
                    </button>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public List<DropdownOption> Options { get; set; }
    [Parameter] public EventCallback<string> SelectedValueChanged { get; set; }
    [Parameter]
    public string SelectedValue { get; set; }
    [Parameter]
    public Icon? Icon { get; set; }
    private DropdownOption SelectedOption => Options.FirstOrDefault(o => o.Value == SelectedValue);
    private bool IsOpen { get; set; }

    private void ToggleDropdown()
    {
        IsOpen = !IsOpen;
    }

    private void ClearSelected()
    {
        SelectedValue = "";
        IsOpen = false;
        SelectedValueChanged.InvokeAsync(SelectedValue);
    }

    private async Task SelectOption(DropdownOption option)
    {
        SelectedValue = option.Value;
        IsOpen = false;
        await SelectedValueChanged.InvokeAsync(SelectedValue);
    }

}